// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/ports/storage/user.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"
	domain "segment-service/internal/core/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockUserStorager is a mock of UserStorager interface.
type MockUserStorager struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoragerMockRecorder
}

// MockUserStoragerMockRecorder is the mock recorder for MockUserStorager.
type MockUserStoragerMockRecorder struct {
	mock *MockUserStorager
}

// NewMockUserStorager creates a new mock instance.
func NewMockUserStorager(ctrl *gomock.Controller) *MockUserStorager {
	mock := &MockUserStorager{ctrl: ctrl}
	mock.recorder = &MockUserStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorager) EXPECT() *MockUserStoragerMockRecorder {
	return m.recorder
}

// AddUsers mocks base method.
func (m *MockUserStorager) AddUsers(arg0 context.Context, arg1 *domain.UsersIds) (*domain.UserAffected, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUsers", arg0, arg1)
	ret0, _ := ret[0].(*domain.UserAffected)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUsers indicates an expected call of AddUsers.
func (mr *MockUserStoragerMockRecorder) AddUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsers", reflect.TypeOf((*MockUserStorager)(nil).AddUsers), arg0, arg1)
}

// CheckUsersExist mocks base method.
func (m *MockUserStorager) CheckUsersExist(arg0 context.Context, arg1 *domain.UsersIds) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUsersExist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUsersExist indicates an expected call of CheckUsersExist.
func (mr *MockUserStoragerMockRecorder) CheckUsersExist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUsersExist", reflect.TypeOf((*MockUserStorager)(nil).CheckUsersExist), arg0, arg1)
}

// DeleteUsers mocks base method.
func (m *MockUserStorager) DeleteUsers(arg0 context.Context, arg1 *domain.UsersIds) (*domain.UserAffected, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsers", arg0, arg1)
	ret0, _ := ret[0].(*domain.UserAffected)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUsers indicates an expected call of DeleteUsers.
func (mr *MockUserStoragerMockRecorder) DeleteUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsers", reflect.TypeOf((*MockUserStorager)(nil).DeleteUsers), arg0, arg1)
}

// GetPercentOfUsersIds mocks base method.
func (m *MockUserStorager) GetPercentOfUsersIds(arg0 context.Context, arg1 *domain.UsersGetPercentDTO) (*domain.UsersIds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPercentOfUsersIds", arg0, arg1)
	ret0, _ := ret[0].(*domain.UsersIds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPercentOfUsersIds indicates an expected call of GetPercentOfUsersIds.
func (mr *MockUserStoragerMockRecorder) GetPercentOfUsersIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPercentOfUsersIds", reflect.TypeOf((*MockUserStorager)(nil).GetPercentOfUsersIds), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockUserStorager) GetUser(arg0 context.Context, arg1 *domain.UserId) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserStoragerMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserStorager)(nil).GetUser), arg0, arg1)
}

// GetUsersIds mocks base method.
func (m *MockUserStorager) GetUsersIds(arg0 context.Context, arg1 *domain.LinitOffset) (*domain.UsersIds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersIds", arg0, arg1)
	ret0, _ := ret[0].(*domain.UsersIds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersIds indicates an expected call of GetUsersIds.
func (mr *MockUserStoragerMockRecorder) GetUsersIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersIds", reflect.TypeOf((*MockUserStorager)(nil).GetUsersIds), arg0, arg1)
}
